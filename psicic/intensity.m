function outdata = intensity(indata, varargin)
%INTENSITY Calculate 1-D intensity profile for cell data.
%   DATA = INTENSITY(DATA) adds the "intensity" field to the "cells"
%   property of a data object generated by CLOAD. The SourceImage property
%   of DATA must contain an image with at least 2 channels. The intensity
%   is interpolated at points along the lines defined by the top and bottom
%   properties, and then summed along those points to produce a 1D profile.
%
%   DATA = INTENSITY(DATA,'PARAMETERNAME',PARAMETERVALUE) sets
%   PARAMETERNAME to PARAMETERVALUE. If a parameter is not specified its 
%   default values is used. Valid parameters and their default values are:
%
%   n (5): number of points to interpolate. Must be at least 2.
%   intchannel (2): the dimension of DATA.SOURCEIMAGE which contains the
%       fluorescent intensity data.

    function paramset(startpoint)
        if length(varargin) < startpoint + 1
            error(['Parameter ' varargin{startpoint} ' specified without value!'])
        elseif ischar(varargin{startpoint})==0
            error(['Parameter ' num2str(startpoint) ' is not a string: invalid syntax'])
        else
            if isfield(param, lower(varargin{startpoint}))
                param.(lower(varargin{startpoint})) = varargin{startpoint+1};
            else
                disp(['WARNING: ' varargin{startpoint} ' is not a valid parameter. It is being ignored.'])
            end
            if length(varargin) >= startpoint+2
                paramset(startpoint + 2)
            end
        end
    end




param.n = 5; % Number of interpolated points on the histogram
param.intchannel = 2; % Channel with intensity data
if length(varargin)>0, paramset(1); end

if size(indata.SourceImage,3) < param.intchannel, error('Specified flourescent channel does not exist in source image.');end

intimage = indata.SourceImage(:,:,param.intchannel);
outdata = indata;
for cellcount = 1:length(indata.cells)
    xi = repmat(indata.cells(cellcount).top(1,:),param.n,1) + repmat([0:param.n-1]',1,indata.parameters.npoints).*repmat((indata.cells(cellcount).bot(1,:)-indata.cells(cellcount).top(1,:))./(param.n-1),param.n,1);
    yi = repmat(indata.cells(cellcount).top(2,:),param.n,1) + repmat([0:param.n-1]',1,indata.parameters.npoints).*repmat((indata.cells(cellcount).bot(2,:)-indata.cells(cellcount).top(2,:))./(param.n-1),param.n,1);
    outdata.cells(cellcount).int_profile = sum(interp2(double(intimage),xi,yi,'*linear'));
    outdata.cells(cellcount).int_mid = interp2(double(intimage), indata.cells(cellcount).top(1,:),indata.cells(cellcount).top(2,:),'linear');
	outdata.cells(cellcount).int_max = max(outdata.cells(cellcount).int_profile);
    outdata.cells(cellcount).int_min = min(outdata.cells(cellcount).int_profile);
    outdata.cells(cellcount).int_pos = find(outdata.cells(cellcount).int_profile == outdata.cells(cellcount).int_max);
    outdata.cells(cellcount).int_xpos = outdata.cells(cellcount).internalx(outdata.cells(cellcount).int_pos);
    outdata.cells(cellcount).int_npos = outdata.cells(cellcount).int_xpos/outdata.cells(cellcount).internalx(end);
end
end